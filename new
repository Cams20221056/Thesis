#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>
#include <WiFi.h>
#include <HttpClient.h>
#include <DIYables_Keypad.h>
#include <Adafruit_PWMServoDriver.h>

// Wi-Fi Credentials
const char *ssid = "Adik";
const char *password = "Adik12345678";

// Server details
const char *server = "192.168.152.20";
const int port = 80;

// LCD configuration
LiquidCrystal_I2C lcd(0x27, 20, 4); // 20x4 LCD

// Define pins
#define COIN_COUNTER_PIN 2
#define BILL_ACCEPTOR_PIN 3
#define SERVO_PIN 12

// Keypad configuration
const int ROW_NUM = 4;
const int COLUMN_NUM = 4;

char keys[ROW_NUM][COLUMN_NUM] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}};

byte pin_rows[ROW_NUM] = {7, 6, 5, 4};
byte pin_column[COLUMN_NUM] = {11, 10, 9, 8};

DIYables_Keypad keypad = DIYables_Keypad(makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM);

// Flags & Variables
bool scannerEnabled = true;
String scannedData = "";
bool recordAvailable = false;

// WiFi and HTTP Client
WiFiClient client;
HttpClient httpClient(client, server, port);

// Balance and selection variables
int balance = 0;
int selectedItemPrice = 0;

// PCA9685 Servo Driver Setup
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x40);
#define SERVOMIN 100 // Minimum pulse length count (0 degrees)
#define SERVOMAX 500 // Maximum pulse length count (180 degrees)
#define SERVO_20 0   // 20 pesos dispenser
#define SERVO_10 1   // 10 pesos dispenser
#define SERVO_5 2    // 5 pesos dispenser
#define SERVO_1 3    // 1 peso dispenser

void setup()
{
  lcd.init();
  lcd.backlight();
  Serial.begin(115200);
  Serial1.begin(9600);

  // Wi-Fi Connection
  WiFi.begin(ssid, password);
  lcd.setCursor(0, 1);
  lcd.print("Connecting...");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
  }
  lcd.clear();
  lcd.print("WiFi Connected");
  delay(2000);

  pinMode(COIN_COUNTER_PIN, INPUT_PULLUP);
  pinMode(BILL_ACCEPTOR_PIN, INPUT_PULLUP);
  pwm.begin();
  pwm.setPWMFreq(50);

  // Display Marquee Message
  displayMarqueeMessage(); // Show marquee on startup

  displayScanMessage();
}

void loop()
{
  if (scannerEnabled && Serial1.available())
  {
    scannedData = Serial1.readStringUntil('\n');
    scannedData.trim();
    lcd.clear();
    lcd.print("Scanning...");
    delay(1000);

    String url = String("/SD333/serverside/check_user.php?user_id=") + scannedData;
    httpClient.get(url);
    int statusCode = httpClient.responseStatusCode();
    String response = httpClient.responseBody();

    if (statusCode == 200 && response.startsWith("exists,"))
    {
      recordAvailable = true;
      lcd.clear();
      lcd.print("Record Available");
    }
    else
    {
      recordAvailable = false;
      lcd.clear();
      lcd.print("Not Found");
    }
    disablePins();
    delay(2000);
    displayWelcomeMessage();
    scannerEnabled = false;
  }

  char key = keypad.getKey();
  if (key == 'A')
  {
    enablePins();
    processCashMode();
  }
  else if (key == 'B')
  {
    processPointsMode();
  }
}

void disablePins()
{
  pinMode(0, INPUT);
  pinMode(1, INPUT);
  pinMode(2, INPUT);
  pinMode(3, INPUT);
}

void enablePins()
{
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
}

void displayScanMessage()
{
  lcd.clear();
  lcd.print("Please Scan Barcode");
}

void displayWelcomeMessage()
{
  lcd.clear();
  lcd.print("Welcome to our Vending Machine");
  lcd.setCursor(0, 2);
  lcd.print("Press A for cash");
  lcd.setCursor(0, 3);
  lcd.print("Press B for points");
}

// Marquee Display Function
void displayMarqueeMessage()
{
  String message1 = "Welcome to VendX";
  String message2 = "Select A to start transaction";

  int length1 = message1.length();
  int length2 = message2.length();

  for (int i = 0; i < length1 + 20; i++)
  { // Scroll first message
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(message1.substring(i, i + 20));
    delay(200);
  }

  delay(500); // Pause before showing the next message

  for (int i = 0; i < length2 + 20; i++)
  { // Scroll second message
    lcd.clear();
    lcd.setCursor(0, 1);
    lcd.print(message2.substring(i, i + 20));
    delay(200);
  }
}

// Cash Mode Process
void processCashMode()
{
  lcd.clear();
  lcd.print("Insert Coins/Bills");
  lcd.setCursor(0, 1);
  lcd.print("Press C to continue");
  while (true)
  {
    char key = keypad.getKey();
    if (key == 'C')
    {
      processItemSelection();
      break;
    }
  }
}

void dispenseChange(int change)
{
  while (change > 0)
  {
    if (change >= 20)
    {
      pwm.setPWM(SERVO_20, 0, map(90, 0, 180, SERVOMIN, SERVOMAX));
      delay(200);
      pwm.setPWM(SERVO_20, 0, map(160, 0, 180, SERVOMIN, SERVOMAX));
      change -= 20;
    }
    else if (change >= 10)
    {
      pwm.setPWM(SERVO_10, 0, map(100, 0, 180, SERVOMIN, SERVOMAX));
      delay(200);
      pwm.setPWM(SERVO_10, 0, map(160, 0, 180, SERVOMIN, SERVOMAX));
      change -= 10;
    }
    else if (change >= 5)
    {
      pwm.setPWM(SERVO_5, 0, map(80, 0, 180, SERVOMIN, SERVOMAX));
      delay(200);
      pwm.setPWM(SERVO_5, 0, map(160, 0, 180, SERVOMIN, SERVOMAX));
      change -= 5;
    }
    else if (change >= 1)
    {
      pwm.setPWM(SERVO_1, 0, map(70, 0, 180, SERVOMIN, SERVOMAX));
      delay(200);
      pwm.setPWM(SERVO_1, 0, map(160, 0, 180, SERVOMIN, SERVOMAX));
      change -= 1;
    }
    delay(500);
  }
}
